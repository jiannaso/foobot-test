import {
  AbstractType,
  YArray,
  YMap
} from "./chunk-IDNBKJMV.js";
import {
  getVersion,
  proxy,
  subscribe
} from "./chunk-VWKI4CVX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-OZI5HTJH.js";

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a2, b) {
      if (a2 === b)
        return true;
      if (a2 && b && typeof a2 == "object" && typeof b == "object") {
        if (a2.constructor !== b.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a2[i2], b[i2]))
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b.source && a2.flags === b.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i2]))
            return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal(a2[key], b[key]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    };
  }
});

// node_modules/valtio-yjs/dist/index.modern.js
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var o = (t) => "object" == typeof t && null !== t && void 0 !== getVersion(t);
var i = (t) => Array.isArray(t) && void 0 !== getVersion(t);
var a = (e) => null === e || "string" == typeof e || "number" == typeof e || "boolean" == typeof e;
var l = (e) => "string" == typeof e || "number" == typeof e || "boolean" == typeof e;
var c = (e, t, s) => {
  e ? e.transact(s, t.transactionOrigin) : s();
};
var f = (e, l2, y = {}) => {
  const u = /* @__PURE__ */ new WeakMap(), d = (e2, t) => {
    c(l2.doc, y, () => {
      if (!o(e2) || !u.has(e2) || u.get(e2) !== l2.get(t))
        if (i(e2)) {
          const s = new YArray();
          u.set(e2, s), p(e2, s, y), l2.set(t, s);
        } else if (o(e2)) {
          const s = new YMap();
          u.set(e2, s), f(e2, s, y), l2.set(t, s);
        } else
          a(e2) ? l2.set(t, e2) : console.warn("unsupported p type", e2);
    });
  }, g = (t, r2) => {
    const i2 = e[r2];
    if (!o(i2) || u.get(i2) !== t)
      if (t instanceof YArray) {
        const n = proxy([]);
        u.set(n, t), p(n, t, y), e[r2] = n;
      } else if (t instanceof YMap) {
        const n = proxy(t.toJSON());
        u.set(n, t), f(n, t, y), e[r2] = n;
      } else
        a(t) ? e[r2] = t : console.warn("unsupported y type", t);
  };
  Object.entries(e).forEach(([e2, t]) => {
    const s = l2.get(e2);
    i(t) && s instanceof YArray && (0, import_fast_deep_equal.default)(t, s.toJSON()) ? (u.set(t, s), p(t, s, y)) : !Array.isArray(t) && o(t) && s instanceof YMap && (0, import_fast_deep_equal.default)(t, s.toJSON()) ? (u.set(t, s), f(t, s, y)) : d(t, e2);
  }), l2.forEach((t, s) => {
    const a2 = e[s];
    i(a2) && t instanceof YArray && (0, import_fast_deep_equal.default)(a2, t.toJSON()) ? (u.set(a2, t), p(a2, t, y)) : !Array.isArray(a2) && o(a2) && t instanceof YMap && (0, import_fast_deep_equal.default)(a2, t.toJSON()) ? (u.set(a2, t), f(a2, t, y)) : g(t, s);
  }), subscribe(e, (t) => {
    t.forEach((t2) => {
      const s = t2[1];
      if (1 !== s.length)
        return;
      const o2 = s[0];
      if ("delete" === t2[0])
        l2.delete(o2);
      else if ("set" === t2[0]) {
        const t3 = e[o2], s2 = l2.get(o2);
        (0, import_fast_deep_equal.default)(s2 instanceof AbstractType ? s2.toJSON() : s2, t3) || d(t3, o2);
      }
    });
  }), l2.observe((t) => {
    t.keysChanged.forEach((t2) => {
      const s = l2.get(t2);
      void 0 === s ? delete e[t2] : g(s, t2);
    });
  });
};
var p = (e, a2, y = {}) => {
  const u = /* @__PURE__ */ new WeakMap(), d = (e2, t) => {
    if (i(e2)) {
      const s = new YArray();
      u.set(e2, s), p(e2, s, y), a2.insert(t, [s]);
    } else if (o(e2)) {
      const s = new YMap();
      u.set(e2, s), f(e2, s, y), a2.insert(t, [s]);
    } else {
      if (!l(e2))
        throw new Error("unsupported p type");
      a2.insert(t, [e2]);
    }
  }, g = (t, r2) => {
    if (t instanceof YArray) {
      const n = proxy([]);
      u.set(n, t), p(n, t, y), e.splice(r2, 0, n);
    } else if (t instanceof YMap) {
      const n = proxy(t.toJSON());
      u.set(n, t), f(n, t), e.splice(r2, 0, n);
    } else {
      if (!l(t))
        throw new Error("unsupported y type");
      e.splice(r2, 0, t);
    }
  };
  e.forEach((e2, t) => {
    const s = a2.get(t);
    i(e2) && s instanceof YArray && (0, import_fast_deep_equal.default)(e2, s.toJSON()) ? u.get(e2) !== s && (u.set(e2, s), p(e2, s, y)) : !Array.isArray(e2) && o(e2) && s instanceof YMap && (0, import_fast_deep_equal.default)(e2, s.toJSON()) ? u.get(e2) !== s && (u.set(e2, s), f(e2, s, y)) : l(e2) && l(s) && e2 === s || d(e2, t);
  }), a2.forEach((t, s) => {
    const a3 = e[s];
    i(a3) && t instanceof YArray && (0, import_fast_deep_equal.default)(a3, t.toJSON()) ? u.get(a3) !== t && (u.set(a3, t), p(a3, t, y)) : !Array.isArray(a3) && o(a3) && t instanceof YMap && (0, import_fast_deep_equal.default)(a3, t.toJSON()) ? u.get(a3) !== t && (u.set(a3, t), f(a3, t, y)) : l(a3) && l(t) && a3 === t || g(t, s);
  }), e.splice(a2.length), subscribe(e, (t) => {
    const s = ((e2) => {
      const t2 = e2.flatMap((e3) => {
        if ("resolve" === e3[0] || "reject" === e3[0])
          return [];
        if (1 !== e3[1].length)
          return [];
        const t3 = Number(e3[1][0]);
        return Number.isFinite(t3) ? [[e3[0], t3, e3[2], e3[3]]] : [];
      }), s2 = (e3, s3) => {
        let n2 = 0, r3 = null;
        for (; e3 + n2 + 1 < t2.length; ) {
          if (("set" === t2[e3 + n2 + 1][0] || "insert" === t2[e3 + n2 + 1][0]) && t2[e3 + n2 + 1][1] < s3 && t2[e3 + n2 + 1][3] === t2[e3][2])
            return n2 + 1;
          if (null !== r3 || "set" !== t2[e3 + n2 + 1][0] && "insert" !== t2[e3 + n2 + 1][0] || t2[e3 + n2 + 1][1] !== s3 - (n2 + 1) || void 0 !== t2[e3 + n2 + 1][3])
            if (null === r3 && e3 + n2 + 1 < t2.length && "set" === t2[e3 + n2 + 1][0] && void 0 !== t2[e3 + n2 + 1][3])
              r3 = [e3 + n2 + 1, t2[e3 + n2 + 1][1]], n2 += 1;
            else {
              if (null === r3 || "set" !== t2[e3 + n2 + 1][0] || t2[e3 + n2 + 1][1] !== r3[1] + (n2 + 1 - r3[0]) || void 0 === t2[e3 + n2 + 1][3])
                return null;
              n2 += 1;
            }
          else
            n2 += 1;
        }
        return null;
      }, n = (e3, s3) => {
        let n2 = 0;
        for (; e3 + n2 + 1 < t2.length && "delete" === t2[e3 + n2 + 1][0] && t2[e3 + n2 + 1][1] === s3 - (n2 + 1); )
          n2 += 1;
        return n2;
      };
      let r2 = 0;
      for (; r2 < t2.length; )
        if ("set" !== t2[r2][0] && "insert" !== t2[r2][0] || void 0 !== t2[r2][3])
          if (r2 > 0 && "delete" === t2[r2][0]) {
            const e3 = t2[r2][1], s3 = n(r2, e3);
            if ("set" === t2[r2 - 1][0] && t2[r2 - 1][1] === e3 - (s3 + 1) && t2[r2 - 1][2] === t2[r2][2]) {
              const n2 = ["delete", e3 - (s3 + 1), t2[r2 - 1][3], void 0];
              t2.splice(r2 - 1, 2), t2.splice(r2 - 1 + s3, 0, n2), r2 -= 1;
            } else
              r2 += 1;
          } else
            r2 += 1;
        else {
          const e3 = s2(r2, t2[r2][1]);
          null !== e3 ? (t2.splice(r2 + e3, 1, ["insert", t2[r2 + e3][1], t2[r2 + e3][2], void 0]), t2.splice(r2, 1)) : r2 += 1;
        }
      return t2;
    })(t);
    (0, import_fast_deep_equal.default)(a2.toJSON(), e) || c(a2.doc, y, () => {
      s.forEach((t2) => {
        const s2 = t2[1];
        if ("delete" === t2[0])
          return void (a2.length > s2 && a2.delete(s2, 1));
        const n = e[s2];
        void 0 !== n && ("set" === t2[0] ? (a2.length > s2 && a2.delete(s2, 1), d(n, s2)) : "insert" === t2[0] && d(n, s2));
      });
    });
  }), a2.observe((t) => {
    if ((0, import_fast_deep_equal.default)(e, a2.toJSON()))
      return;
    let s = 0;
    t.changes.delta.forEach((t2) => {
      t2.retain && (s += t2.retain), t2.delete && e.splice(s, t2.delete), t2.insert && (Array.isArray(t2.insert) ? t2.insert.forEach((e2, t3) => {
        g(e2, s + t3);
      }) : g(t2.insert, s), s += t2.insert.length);
    });
  });
};
export {
  p as bindProxyAndYArray,
  f as bindProxyAndYMap
};
//# sourceMappingURL=valtio-yjs.js.map
