{
  "version": 3,
  "sources": ["../../proxy-compare/src/index.ts", "../../valtio/esm/vanilla.js"],
  "sourcesContent": ["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfrozenCache = new WeakMap<object, object>();\nconst unfreeze = <T extends object>(obj: T): T => {\n  let unfrozen = unfrozenCache.get(obj);\n  if (!unfrozen) {\n    if (Array.isArray(obj)) {\n      // Arrays need a special way to copy\n      unfrozen = Array.from(obj);\n    } else {\n      // For non-array objects, we create a new object keeping the prototype\n      // with changing all configurable options (otherwise, proxies will complain)\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n      unfrozen = Object.create(getProto(obj), descriptors);\n    }\n    unfrozenCache.set(obj, unfrozen as object);\n  }\n  return unfrozen as T;\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [FROZEN_PROPERTY]: frozen,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (key: string | symbol, skipWithOwnKeys?: boolean) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (!skipWithOwnKeys || !used.has(OWN_KEYS_SYMBOL)) {\n        used.add(key);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(key);\n      return createProxy(\n        (target as any)[key],\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `'a' in obj` is handled.\n      recordUsage(key);\n      return key in target;\n    },\n    getOwnPropertyDescriptor(target, key) {\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `obj.getOwnPropertyDescriptor('a'))` is handled.\n      recordUsage(key, true);\n      return Object.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!handlerAndState || handlerAndState[1][FROZEN_PROPERTY] !== frozen) {\n    handlerAndState = createProxyHandler<typeof target>(target, frozen);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      frozen ? unfreeze(target) : target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(prevObj, nextObj)\n      : isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n", "import { markToTrack, getUntracked } from 'proxy-compare';\n\nconst isObject = (x) => typeof x === \"object\" && x !== null;\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst VERSION = (import.meta.env && import.meta.env.MODE) !== \"production\" ? Symbol(\"VERSION\") : Symbol();\nconst LISTENERS = (import.meta.env && import.meta.env.MODE) !== \"production\" ? Symbol(\"LISTENERS\") : Symbol();\nconst SNAPSHOT = (import.meta.env && import.meta.env.MODE) !== \"production\" ? Symbol(\"SNAPSHOT\") : Symbol();\nconst buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), PROMISE_RESULT = (import.meta.env && import.meta.env.MODE) !== \"production\" ? Symbol(\"PROMISE_RESULT\") : Symbol(), PROMISE_ERROR = (import.meta.env && import.meta.env.MODE) !== \"production\" ? Symbol(\"PROMISE_ERROR\") : Symbol(), snapshotCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (version, target, receiver) => {\n  const cache = snapshotCache.get(receiver);\n  if ((cache == null ? void 0 : cache[0]) === version) {\n    return cache[1];\n  }\n  const snapshot2 = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n  markToTrack(snapshot2, true);\n  snapshotCache.set(receiver, [version, snapshot2]);\n  Reflect.ownKeys(target).forEach((key) => {\n    const value = Reflect.get(target, key, receiver);\n    if (refSet.has(value)) {\n      markToTrack(value, false);\n      snapshot2[key] = value;\n    } else if (value instanceof Promise) {\n      if (PROMISE_RESULT in value) {\n        snapshot2[key] = value[PROMISE_RESULT];\n      } else {\n        const errorOrPromise = value[PROMISE_ERROR] || value;\n        Object.defineProperty(snapshot2, key, {\n          get() {\n            if (PROMISE_RESULT in value) {\n              return value[PROMISE_RESULT];\n            }\n            throw errorOrPromise;\n          }\n        });\n      }\n    } else if (value == null ? void 0 : value[LISTENERS]) {\n      snapshot2[key] = value[SNAPSHOT];\n    } else {\n      snapshot2[key] = value;\n    }\n  });\n  return Object.freeze(snapshot2);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1], proxyFunction2 = (initialObject) => {\n  if (!isObject(initialObject)) {\n    throw new Error(\"object required\");\n  }\n  const found = proxyCache.get(initialObject);\n  if (found) {\n    return found;\n  }\n  let version = versionHolder[0];\n  const listeners = /* @__PURE__ */ new Set();\n  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {\n    if (version !== nextVersion) {\n      version = nextVersion;\n      listeners.forEach((listener) => listener(op, nextVersion));\n    }\n  };\n  const propListeners = /* @__PURE__ */ new Map();\n  const getPropListener = (prop) => {\n    let propListener = propListeners.get(prop);\n    if (!propListener) {\n      propListener = (op, nextVersion) => {\n        const newOp = [...op];\n        newOp[1] = [prop, ...newOp[1]];\n        notifyUpdate(newOp, nextVersion);\n      };\n      propListeners.set(prop, propListener);\n    }\n    return propListener;\n  };\n  const popPropListener = (prop) => {\n    const propListener = propListeners.get(prop);\n    propListeners.delete(prop);\n    return propListener;\n  };\n  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n  const handler = {\n    get(target, prop, receiver) {\n      if (prop === VERSION) {\n        return version;\n      }\n      if (prop === LISTENERS) {\n        return listeners;\n      }\n      if (prop === SNAPSHOT) {\n        return createSnapshot(version, target, receiver);\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n    deleteProperty(target, prop) {\n      const prevValue = Reflect.get(target, prop);\n      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];\n      if (childListeners) {\n        childListeners.delete(popPropListener(prop));\n      }\n      const deleted = Reflect.deleteProperty(target, prop);\n      if (deleted) {\n        notifyUpdate([\"delete\", [prop], prevValue]);\n      }\n      return deleted;\n    },\n    set(target, prop, value, receiver) {\n      var _a;\n      const hasPrevValue = Reflect.has(target, prop);\n      const prevValue = Reflect.get(target, prop, receiver);\n      if (hasPrevValue && objectIs(prevValue, value)) {\n        return true;\n      }\n      const childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];\n      if (childListeners) {\n        childListeners.delete(popPropListener(prop));\n      }\n      if (isObject(value)) {\n        value = getUntracked(value) || value;\n      }\n      let nextValue;\n      if ((_a = Object.getOwnPropertyDescriptor(target, prop)) == null ? void 0 : _a.set) {\n        nextValue = value;\n      } else if (value instanceof Promise) {\n        nextValue = value.then((v) => {\n          nextValue[PROMISE_RESULT] = v;\n          notifyUpdate([\"resolve\", [prop], v]);\n          return v;\n        }).catch((e) => {\n          nextValue[PROMISE_ERROR] = e;\n          notifyUpdate([\"reject\", [prop], e]);\n        });\n      } else if (value == null ? void 0 : value[LISTENERS]) {\n        nextValue = value;\n        nextValue[LISTENERS].add(getPropListener(prop));\n      } else if (canProxy(value)) {\n        nextValue = proxy(value);\n        nextValue[LISTENERS].add(getPropListener(prop));\n      } else {\n        nextValue = value;\n      }\n      Reflect.set(target, prop, nextValue, receiver);\n      notifyUpdate([\"set\", [prop], value, prevValue]);\n      return true;\n    }\n  };\n  const proxyObject = newProxy(baseObject, handler);\n  proxyCache.set(initialObject, proxyObject);\n  Reflect.ownKeys(initialObject).forEach((key) => {\n    const desc = Object.getOwnPropertyDescriptor(\n      initialObject,\n      key\n    );\n    if (desc.get || desc.set) {\n      Object.defineProperty(baseObject, key, desc);\n    } else {\n      proxyObject[key] = initialObject[key];\n    }\n  });\n  return proxyObject;\n}) => [\n  proxyFunction2,\n  refSet,\n  VERSION,\n  LISTENERS,\n  SNAPSHOT,\n  objectIs,\n  newProxy,\n  canProxy,\n  PROMISE_RESULT,\n  PROMISE_ERROR,\n  snapshotCache,\n  createSnapshot,\n  proxyCache,\n  versionHolder\n];\nconst [proxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n  return proxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n  return isObject(proxyObject) ? proxyObject[VERSION] : void 0;\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\" && !(proxyObject == null ? void 0 : proxyObject[LISTENERS])) {\n    console.warn(\"Please use proxy object\");\n  }\n  let promise;\n  const ops = [];\n  const listener = (op) => {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(() => {\n        promise = void 0;\n        callback(ops.splice(0));\n      });\n    }\n  };\n  proxyObject[LISTENERS].add(listener);\n  return () => {\n    proxyObject[LISTENERS].delete(listener);\n  };\n}\nfunction snapshot(proxyObject) {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\" && !(proxyObject == null ? void 0 : proxyObject[SNAPSHOT])) {\n    console.warn(\"Please use proxy object\");\n  }\n  return proxyObject[SNAPSHOT];\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\nexport { getVersion, proxy, ref, snapshot, subscribe, unstable_buildProxyFunction };\n"],
  "mappings": "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",
  "names": ["OWN_KEYS_SYMBOL", "Symbol", "TRACK_MEMO_SYMBOL", "GET_ORIGINAL_SYMBOL", "newProxy", "target", "handler", "Proxy", "getProto", "Object", "getPrototypeOf", "objectsToTrack", "WeakMap", "isObjectToTrack", "obj", "has", "get", "prototype", "Array", "isObject", "x", "e", "unfrozenCache", "getOriginalObject", "affected", "proxyCache", "s", "frozen", "isFrozen", "values", "getOwnPropertyDescriptors", "some", "descriptor", "writable", "g", "handlerAndState", "origObj", "state", "f", "c", "recordUsage", "key", "skipWithOwnKeys", "trackObject", "used", "Set", "set", "add", "createProxy", "delete", "getOwnPropertyDescriptor", "ownKeys", "Reflect", "deleteProperty", "unfrozen", "isArray", "from", "descriptors", "forEach", "desc", "configurable", "create", "isOwnKeysChanged", "prevObj", "nextObj", "prevKeys", "nextKeys", "length", "k", "i", "isChanged", "cache", "is", "hit", "n", "changed", "getUntracked", "obj", "isObjectToTrack", "GET_ORIGINAL_SYMBOL", "markToTrack", "mark", "objectsToTrack", "set", "affectedToPathList", "affected", "list", "seen", "WeakSet", "walk", "x", "path", "has", "isObject", "add", "used", "get", "getOriginalObject", "forEach", "key", "push", "e"]
}
